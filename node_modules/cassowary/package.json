{
  "_args": [
    [
      {
        "raw": "cassowary@0.0.2",
        "scope": null,
        "escapedName": "cassowary",
        "name": "cassowary",
        "rawSpec": "0.0.2",
        "spec": "0.0.2",
        "type": "version"
      },
      "/home/adamcee/learnings/my-autolayout/node_modules/autolayout"
    ]
  ],
  "_from": "cassowary@0.0.2",
  "_id": "cassowary@0.0.2",
  "_inCache": true,
  "_location": "/cassowary",
  "_npmUser": {
    "name": "slightlyoff",
    "email": "slightlyoff@chromium.org"
  },
  "_npmVersion": "1.1.66",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cassowary@0.0.2",
    "scope": null,
    "escapedName": "cassowary",
    "name": "cassowary",
    "rawSpec": "0.0.2",
    "spec": "0.0.2",
    "type": "version"
  },
  "_requiredBy": [
    "/autolayout"
  ],
  "_resolved": "https://registry.npmjs.org/cassowary/-/cassowary-0.0.2.tgz",
  "_shasum": "4614f1537f172e842eb31c8e41f9d6ffa7e24a3d",
  "_shrinkwrap": null,
  "_spec": "cassowary@0.0.2",
  "_where": "/home/adamcee/learnings/my-autolayout/node_modules/autolayout",
  "author": {
    "name": "Alex Russell",
    "email": "slightlyoff@chromium.org"
  },
  "bugs": {
    "url": "https://github.com/slightlyoff/cassowary-js-refactor/issues"
  },
  "contributors": [
    {
      "name": "Alex Russell",
      "email": "slightlyoff@chromium.org",
      "url": "http://infrequently.org"
    },
    {
      "name": "Greg J. Badros",
      "url": "http://www.badros.com/greg/"
    }
  ],
  "dependencies": {},
  "description": "A fast, modern JavaScript version of the Cassowary hierarchial linear constraint solver",
  "devDependencies": {
    "chai": "*",
    "mocha": "*",
    "pegjs": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "4614f1537f172e842eb31c8e41f9d6ffa7e24a3d",
    "tarball": "https://registry.npmjs.org/cassowary/-/cassowary-0.0.2.tgz"
  },
  "engines": {
    "node": ">=0.8.x"
  },
  "homepage": "https://github.com/slightlyoff/cassowary-js-refactor#readme",
  "license": "LGPL",
  "main": "./bin/c.js",
  "maintainers": [
    {
      "name": "thick",
      "email": "dblknttd@gmail.com"
    },
    {
      "name": "slightlyoff",
      "email": "slightlyoff@chromium.org"
    }
  ],
  "name": "cassowary",
  "optionalDependencies": {},
  "readme": "Cassowary JS\n============\n\nCassowary is an algorithm that computes flexible, responsive layouts quickly\nwithout resorting to piles of imperative code. Just describe the preferred\nrelationships between values, noting which constraints are more important than\nothers, and Cassowary figures out an optimal solution based on the current\ninputs. When the inputs or constraints change, Cassowary is particularly\nefficient at computing a new answer quickly based on the last-known solution.\nThese properties together make it ideal for use in layout systems -- indeed,\nit's the algorithm at the center of Apple's new automatic layout system for\nCocoa.\n\nThis repo hosts an improved version of [Greg Badros's\nport](http://www.badros.com/greg/cassowary/js/quaddemo.html \"JS Quad Demo\") of\nthe [Cassowary hierarchial constraint\ntoolkit](http://www.cs.washington.edu/research/constraints/cassowary/) to\n[JavaScript](http://cassowary.cvs.sourceforge.net/viewvc/cassowary/cassowary/js/).\n\nThis version dramatically improves the performance of the original translation,\nremoves external library dependencies, and improves hackability. The solver\ncore can now be used inside web workers, at the command line, and directly in\nmodern browsers.\n\nFor civil discussion of this port and constraint-based UIs, join the\n[Overconstrained mailing\nlist](https://groups.google.com/forum/?fromgroups#!forum/overconstrained).\n\nConstraint Solver? Say What?\n----------------------------\n\nConstraint solvers are iterative algorithms that work towards ever more ideal\nsolutions, often using some variant of Dantzig's [simplex\nmethod](http://en.wikipedia.org/wiki/Simplex_algorithm). They are primarialy of\ninterest in situations where it's possible to easily set up a set of rules\nwhich you would like a solution to adhere to, but when it is very difficult to\nconsider all of the possible solutions yourself.\n\nCassowary and other hierarchial constraint toolkits add a unique mechanism for\ndeciding between sets of rules that might conflict in determining which of a\nset of possible solutions are \"better\". By allowing constraint authors to\nspecify *weights* for the constraints, the toolkit can decide in terms of\n*stronger* constraints over weaker ones, allowing for more optimal solutions.\nThese sorts of situations arise *all the time* in UI programming; e.g.: \"I'd\nlike this to be it's natural width, but only if that's smaller than 600px, and\nnever let it get smaller than 200px\". Constraint solvers offer a way out of the\nprimordial mess of nasty conditionals and brittle invalidations.\n\nIf all of this sounds like it's either deeply esoteric or painfully academic,\nyou might start by boning up on what optimizers like this do and what they're\ngood for. I recommend John W. Chinneck's [\"Practical Optimization: A Gentle\nIntroduction\"](http://www.sce.carleton.ca/faculty/chinneck/po.html) and the\nCassowary paper that got me into all of this: [\"Constraint Cascading Style\nSheets for the\nWeb\"](http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.101.4819)\n\nGetting Started Under Node\n--------------------------\n\nCassowary is [\"distributed as an NPM package\"](https://npmjs.org/package/cassowary)\nand can be added as a dependency or used under node in the usual way as a\nresult. Using Cassowary under node is as simple as:\n\n```js\n// The entire API is exported by the cassowary object\nvar c = require(\"cassowary\");\n\nvar solver = new c.SimplexSolver();\nvar x = new c.Variable({ value: 167 });\nvar y = new c.Variable({ value: 2 });\nvar eq = new c.Equation(x, new c.Expression(y));\nsolver.addConstraint(eq);\n// ...\n```\n\nThe current low (sub 0.1) version number reflects the instability of the API.\nAlso, note that the NPM pacakage includes no tests or demos. For those, clone\nthe github repo.\n\nTo make an NPM package from sources, clone the github repo, follow the below\ninstructions for installing dependencies, and run `make dist`. This is the same\nprocess the maintainers use to package NPM releases.\n\nGetting Started From Source\n---------------------------\n\nThis repo pulls in other Git repositories through\n[submodules](http://help.github.com/submodules/). After cloning the repo, run:\n\n```\n$ git submodule update --init\n...\n```\n\nTo run the tests, point your thorougly modern browser at `tests/unittests.html`\nor `demos/quad/quaddemo.html`.\n\nRunning tests from the command line requires [Node](http://nodejs.org/). Once\nyou've installed Node, run:\n\n```\n$ npm install\n...\n$ npm test\ncd tests; ../node_modules/.bin/mocha --reporter list test.js\n| 93 tests to run in 10 groups\n| ------------------------------------------------------------\n| GROUP \"c\" has 5 tests to run\n| _inc\n| own\n| extend\n| inherit\n| basicJSON\n| ------------------------------------------------------------\n| GROUP \"c.Constraint\" has 13 tests to run\n| equationFromExpression\n...\n```\n\nIf you have a working `make`, a Makefile is provided with a `test` target that\ndoes the same thing. The Makefile also provides a `make build` target which\ngenerates a new minified `bin/c.js` binary out of the files in `src/`. It\nrequires Python and isn't something you should need to do manually as it's not\nreqired to run tests or use the solver. The checked-in binary should always be\nup-to-date (or at some checkpoint which is known-good), so use it in your\nprojects instead of the source versions.\n\nSupported Runtimes\n------------------\n\nThis refactoring currently runs in:\n\n  * Chrome (and Chrome Frame)\n  * Firefox 9+\n  * Opera 11+\n  * Safari 5+\n  * IE 9+\n  * Command-line:\n    * V8 (d8 shell)\n    * JSC (built into OS X)\n    * Rhino (Java) js.jar included in checkout\n\nThis is an unapolgetically modern reinterpretation optimized for size, low\ncomplexity, and speed. And litle else. No, it will not work on old versions of\nIE -- that's what [Chrome Frame](http://google.com/chromeframe) is for.\n\nConfiguration\n-------------\n\n```\n// Log general debugging information\nc.debug = [ false || true ]; // default false\n// Detailed logging\nc.trace = [ false || true ]; // default false\n// Verbose logging\nc.verbose = [ false || true ]; // default false\n// Logging of tableau additions\nc.traceAdded = [ false || true ]; // default false\n// Logging of ...?\nc.GC = [ false || true ]; // default false\n```\n\n<!--\nTODO(slightlyoff): show how to set configuration information through command line and in the tests.\n\nAPI\n---\n\nTODO(slightlyoff)\n-->\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/slightlyoff/cassowary-js-refactor.git"
  },
  "scripts": {
    "test": "cd tests; mocha *-test.js"
  },
  "url": "https://github.com/slightlyoff/cassowary-js-refactor",
  "version": "0.0.2"
}
